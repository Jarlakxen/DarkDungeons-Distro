use polsys;

program MathTest()
	PlusEqualTests();
	MinusEqualTests();
	TimesEqualTests();
	DivideEqualTests();
	ModulusEqualTests();
	
	SpeedTests();
	return 1;
endprogram

function PlusEqualTests()
	Print("\nPlusEqual Tests()");
	var a := 1;
	a += 2;
	Print("A->"+a);

	var b := 1;
	b += 4+3;
	Print("B->"+b);
	
	var c := array{1};
	c[1] += 3;
	Print("C->"+c);

	var d := array{"A"};
	var e := array{"B"};
	d += e;
	Print("D->"+d);
	
	var f := struct;
	f.+A := 1;
	f.A += 3;
	Print("F.A->"+f.A);
	
	var g := "PO";
	g+="L";
	Print("G->"+g);
	
	var h;
	for ( h:=0; h<=2; h+=1 )
		print("H->"+h);
	endfor

	var i := dictionary;
	i["A"] := 1;
	i["A"] += 3;
	Print("i['A']->"+i["A"]);
	
	return 1;
endfunction

function MinusEqualTests()
	Print("\nMinusEqual Tests()");
	var a := 3;
	a -= 2;
	Print("A->"+a);

	var b := 4;
	b -= 3-1;
	Print("B->"+b);
	
	var c := array{5};
	c[1] -= 3;
	Print("C->"+c);

	var d := array{"A", {"B"}};
	var e := array{"B"};
	d -= e;
	Print("D->"+d);

	var f := struct;
	f.+A := 7;
	f.A -= 3;
	Print("F.A->"+f.A);

	var g := "POLLL";
	g -= "LL";
	Print("G->"+g);
	
	g := "POLLL";
	g -= "OLL";
	Print("G->"+g);

	var h;
	for ( h:=3; h>=0; h-=1 )
		print("H->"+h);
	endfor

	var i := dictionary;
	i["A"] := 4;
	i["A"] -= 3;
	Print("i['A']->"+i["A"]);
	
	return 1;
endfunction

function TimesEqualTests()
	Print("\nTimesEqual Tests()");
	var a := 3;
	a *= 2;
	Print("A->"+a);

	var b := 4;
	b *= 3-1;
	Print("B->"+b);
	
	var c := array{5};
	c[1] *= 3;
	Print("C->"+c);

	var d := array{"A", {"B"}};
	var e := array{"B"};
	d *= e;
	Print("D->"+d);

	var f := struct;
	f.+A := 7;
	f.A *= 3;
	Print("F.A->"+f.A);

	var g := "POLLL";
	g *= "LL";
	Print("G->"+g);

	var h;
	for ( h:=2; h<=16; h*=2 )
		print("H->"+h);
	endfor

	var i := dictionary;
	i["A"] := 4;
	i["A"] *= 3;
	Print("i['A']->"+i["A"]);
	
	return 1;
endfunction

function DivideEqualTests()
	Print("\nDivideEqual Tests()");
	var a := 6;
	a /= 2;
	Print("A->"+a);

	var b := 6;
	b /= 3-1;
	Print("B->"+b);
	
	var c := array{9};
	c[1] /= 3;
	Print("C->"+c);

	var d := array{"A", {"B"}};
	var e := array{"B"};
	d /= e;
	Print("D->"+d);

	var f := struct;
	f.+A := 15.5;
	f.A /= 3;
	Print("F.A->"+f.A);

	var g := "POLLL";
	g /= "LL";
	Print("G->"+g);

	var h;
	for ( h:=12; h>3; h/=2 )
		print("H->"+h);
	endfor

	var i := dictionary;
	i["A"] := 27;
	i["A"] /= 5;
	Print("i['A']->"+i["A"]);
	
	return 1;
endfunction

function ModulusEqualTests()
	Print("\nModulusEqual Tests()");
	var a := 6;
	a %= 4;
	Print("A->"+a);

	var b := 6;
	b %= 3-1;
	Print("B->"+b);
	
	var c := array{9};
	c[1] %= 3;
	Print("C->"+c);

	var d := array{"A", {"B"}};
	var e := array{"B"};
	d %= e;
	Print("D->"+d);

	var f := struct;
	f.+A := 15.5;
	f.A %= 3;
	Print("F.A->"+f.A);

	var g := "POLLL";
	g %= "LL";
	Print("G->"+g);

	var h;
	for ( h:=12; h>3; h%=2 )
		print("H->"+h);
	endfor

	var i := dictionary;
	i["A"] := 27;
	i["A"] %= 5;
	Print("i['A']->"+i["A"]);
	
	return 1;
endfunction


function SpeedTests()
	// Wont work in RunECL
	/*var start, end, i;
	
	start := ReadMillisecondClock();
	for ( i:=0; i<=10000; i:=i+1 )
		//
	endfor
	end := ReadMillisecondClock();
	Print("i:=i+1 == "+(start-end)+" ms.");
	
	start := ReadMillisecondClock();
	for ( i:=0; i<=10000; i+=1 )
		//
	endfor
	end := ReadMillisecondClock();
	Print("i+=1 == "+(start-end)+" ms.");
	*/
	return 1;
endfunction
