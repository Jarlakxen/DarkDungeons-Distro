/* $Id$
 *
 */

use uo;
use os;
use util;

include ":datafile:datafile";
include ":email:gumps";
include ":email:settings";
include ":gumps:gumpprompt";
include "include/string";

//Global because its just easier.
var email_data_file := DFOpenDataFile(":email:emails", DF_CREATE);
var address_data_file := DFOpenDataFile(":email:AddressBooks", DF_CREATE);
var blocked_data_file := DFOpenDataFile(":email:BlockLists", DF_CREATE);

var settings := EML_GetSettingsCfgElem("Settings");

program EmailClient(params)
	var mobile := params[1];
	var box_id := params[2];
	var send_to := params[3];
	var subject := params[4];
	var message := params[5];
	params := 0; // Not needed anymore.

	if ( send_to )
		if ( message )
			if ( Lower(TypeOf(message)) != "array" )
				message := GFWordWrap(message, 595);
			endif
			SendEMail(mobile, box_id, send_to, subject, message);
		else
			ComposeEmail(mobile, box_id, send_to, subject);
		endif
	else
		IndexGump(mobile, box_id);
	endif

	return 1;
endprogram

function IndexGump(mobile, box_id)
	var mail_elem := DFFindElement(email_data_file, Hex(box_id), DF_CREATE);

	while ( mobile.connected )
		var gump := BuildInboxGump(box_id, mail_elem);

		var input := GFSendGump(mobile, gump);
		if ( input[UPDATE_INBOX_BTN] )
			continue;
		elseif ( input[DELETE_ALL_BTN] )
			foreach mail_number in ( mail_elem.PropNames() )
				mail_elem.EraseProp(Hex(mail_number));
				SleepMS(2);
			endforeach
		elseif ( input[BLOCK_LIST_BTN] )
			BlockList(mobile, box_id);
		elseif ( input[ADDRESS_BOOK_BTN] )
			AddressBook(mobile, box_id);
		elseif ( input[NEW_LETTER_BTN] )
			ComposeEmail(mobile, box_id);
		elseif ( input[0] >= READMAIL_START )
			var key := input[0] - READMAIL_START;
			ReadMessage(mobile, box_id, key, mail_elem);
		else
			SendSysMessage(mobile, "Cancelled.");
			break;
		endif
	endwhile

	return 1;
endfunction

function ReadMessage(mobile, box_id, mail_num, byref mail_elem)
	mail_num := Hex(CInt(mail_num));

	var email := mail_elem.GetProp(mail_num);
	email.read += 1;
	mail_elem.SetProp(mail_num, email);

	var gump := BuildReaderGump(email);

	var input := GFSendGump(mobile, gump);
	if ( !input[0] )
		return 1;
	elseif ( input[DELETE_MSG_BTN] )
		mail_elem.EraseProp(mail_num);
		return 1;
	elseif ( input[CLOSE_EMAIL_BTN] )
		return 1;
	else
		ComposeEmail(mobile, box_id, email.from_box);
	endif
endfunction

function BlockList(mobile, box_id)
	var data_elem := DFFindElement(blocked_data_file, Hex(box_id), DF_CREATE);

	var entry_list := array;
	var gump := BuildBlockListGump(data_elem, entry_list);

	var input := GFSendGump(mobile, gump);

	if ( input[UPDATE_LIST_BTN] )
		var entry_num := 1;
		for ( entry_num; entry_num<=settings.BlockListEntries; entry_num+=1 )
			var block_id := GFExtractData(input, entry_list[entry_num].boxid);
			var name := GFExtractData(input, entry_list[entry_num].name);

			if ( block_id == error )
				continue;
			elseif ( name == error )
				continue;
			endif

			data_elem.SetProp(Hex(entry_num), struct{"boxid":=block_id, "name":=name});
			SleepMS(2);
		endfor
	elseif ( input[DELETE_ALL_BTN] )
		foreach propname in ( data_elem.PropNames() )
			data_elem.EraseProp(propname);
			SleepMS(2);
		endforeach
	endif

	return 1;
endfunction

function AddressBook(mobile, box_id, byref send_to:="", writing:=0)
	var data_elem := DFFindElement(address_data_file, Hex(box_id), DF_CREATE);

	var entry_list := array;
	var gump := BuildAddressBookGump(data_elem, entry_list);

	var input := GFSendGump(mobile, gump);

	if ( input[UPDATE_LIST_BTN] )
		var entry_num := 1;
		for ( entry_num; entry_num<=settings.AddressBookEntries; entry_num+=1 )
			var block_id := GFExtractData(input, entry_list[entry_num].boxid);
			var name := GFExtractData(input, entry_list[entry_num].name);

			if ( block_id == error )
				continue;
			elseif ( name == error )
				continue;
			endif

			data_elem.SetProp(Hex(entry_num), struct{"boxid":=block_id, "name":=name});
			SleepMS(2);
		endfor
	elseif ( input[DELETE_ALL_BTN] )
		foreach propname in ( data_elem.PropNames() )
			data_elem.EraseProp(propname);
			SleepMS(2);
		endforeach
	elseif ( input[0] >= ADDYBOOK_START )
		var entry_info := data_elem.GetProp(Hex(input[0]-ADDYBOOK_START));
		send_to += " "+entry_info.boxid;
		if ( !writing )
			ComposeEmail(mobile, box_id, send_to);
		endif
	endif

	return 1;
endfunction

function ComposeEmail(mobile, box_id, send_to:="", subject:="")
	var message:=array;
	while ( mobile.connected )
		var gump := BuildComposeGump(send_to, subject, message);
		var input := GFSendGump(mobile, gump);
		if ( input[0] == 1 )
			// Right click
			break;
		elseif ( input[CLOSE_EMAIL_BTN] )
			break;
		endif

		// Retrieve gump input data and word-wrap
		send_to := GFExtractData(input, SEND_TO_TXT);
		if ( !send_to )
			send_to := "";
		endif

		subject := GFExtractData(input, SUBJECT_TXT);
		if ( !subject )
			subject := "";
		endif

		var i:=1, temp_string := "";
		for ( i; i<=message.Size(); i+=1 )
			var temp_data := GFExtractData(input, message[i]);
			if ( temp_data )
				temp_string += " " + temp_data;
			endif
			SleepMS(2);
		endfor
		message := GFWordWrap(temp_string, 595);

		// Process buttons other than cancellation.
		if ( input[WORD_WRAP_BTN] )
			continue;
		elseif ( input[ADDRESS_BOOK_BTN] )
			AddressBook(mobile, box_id, send_to, 1);
		elseif ( input[SEND_EMAIL_BTN] )
			SendEmail(mobile, box_id, send_to, subject, message);
			break;
		endif

		SleepMS(2);
	endwhile

	return 1;
endfunction

function SendEmail(mobile, box_id, send_to, subject, msg_array)
	if ( !mobile.IsA(POLCLASS_MOBILE) )
		mobile := struct{"name":="N/A", "acctname":="N/A", "ip":=0};
	endif

	var email := struct;
	email.+subject := subject;
	email.+message := msg_array;
	email.+from_name := mobile.name;
	email.+from_acct := mobile.acctname;
	email.+from_ip := mobile.ip;
	email.+from_box := box_id;
	email.+time := POLCore().systime;
	email.+read := 0;

	send_to := SplitWords(send_to);
	subject := RemoveSpaces(subject, CLR_LEADING_SPACES+CLR_TRAILING_SPACES);

	var gump := GFCreateGump();
	GFMovable(gump, 0);
	GFResizePic(gump, 0, 0, GFGetCfgConst("Defaults", "BackGround"), 640, 480);
	GFResizePic(gump, 15, 15, GFGetCfgConst("Defaults", "ForeGround"), 610, 450);
	GFTextMid(gump, 15, 25, 620, 2100, "Mail Information");
	var y_pos := 55;
	foreach boxid in ( send_to )
		var inbox_elem := DFFindElement(email_data_file, Hex(boxid), DF_NO_CREATE);
		if ( !inbox_elem )
			GFTextLine(gump, 20, y_pos, 2100, boxid+" does not exist.");
			y_pos += 20;
		elseif ( IsBlocked(box_id, boxid) )
			GFTextLine(gump, 20, y_pos, 2100, "Could not send message to box "+boxid);
			y_pos += 20;
		else
			var next_msg := inbox_elem.GetProp("NextMsgID");
			if ( !next_msg )
				next_msg := 1;
			elseif ( next_msg > settings.MaxMessages )
				next_msg := 1;
			else
				next_msg += 1;
			endif

			inbox_elem.SetProp("NextMsgID", next_msg);
			inbox_elem.SetProp(Hex(next_msg), email);

			GFTextLine(gump, 20, y_pos, 2100, "Message to box "+boxid+" was sent.");
			y_pos += 20;
		endif
		SleepMS(2);
	endforeach

	if ( mobile.IsA(POLCLASS_MOBILE) )
		GFSendGump(mobile, gump);
	endif

	return 1;
endfunction

function IsBlocked(serial, box_id)
	serial := CInt(serial);
	var block_list := DFFindElement(blocked_data_file, Hex(box_id));
	foreach entry in ( block_list.PropNames() )
		var prop_info := block_list.GetProp(Hex(entry));
		if ( serial == CInt(prop_info.boxid) )
			return 1;
		endif

		SleepMS(2);
	endforeach

	return 0;
endfunction

