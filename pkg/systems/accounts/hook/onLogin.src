/*
 *   Author: Unreal (MontuZ@Gmail.com) April 28, 2006.
 *   Version: 1.0
 *   Core: 096
 *   Description: Auto Account Creator. Just like many of you know this is a RunUO/SphereServer
 *   feature and now a POL feature. What it does exactly is when a person trys to login with
 *   an unknown(non-existant) account. This script creates the account and logs them in.
 *   Bugs: There shouldn't be any, but you never really know. So if a bug does come up
 *   please send me an email or post on the forum where you got this(polserver.com)
 *
 */

use uo;
use os;
use polsys;

include ":accounts:accounts";
include ":accounts:settings";
include ":accounts:report";
include "include/string"; // Added for RemoveSpaces()

CONST OFFSET_ACCOUNT_NAME	:= 0x01;
CONST OFFSET_ACCOUNT_PASS	:= 0x1F;
CONST INFO_LEN			:= 30;

enum THEFT_LEVELS
	ACCT_NOT_EXIST		:= 0,
	ACCT_LOGIN_OKAY		:= 1,
	ACCT_LOGIN_FAIL		:= 2,
	ACCT_LOGIN_HACK		:= 3,
endenum

Program Install()
	Print("INSTALLING: Auto Account/Theft Prevention PH...");
	Return 1;
Endprogram

exported function LoginHook(connection, byref packet)
	connection := connection; // Avoid compiler warnings.

	// RemoveSpaces() will also remove null values
	var username := RemoveSpaces(packet.GetString(OFFSET_ACCOUNT_NAME, INFO_LEN), CLR_ALL_SPACES);
	var password := RemoveSpaces(packet.GetString(OFFSET_ACCOUNT_PASS, INFO_LEN), CLR_ALL_SPACES);

	if ( username == error )
		ACCT_ReportText("Account/GetString Error:"+username.errortext, ACCT_REPORT_CONSOLE+ACCT_REPORT_SYSLOG);
		return 0;
	elseif ( password == error )
		ACCT_ReportText("Password/GetString Error:"+password.errortext, ACCT_REPORT_CONSOLE+ACCT_REPORT_SYSLOG);
		return 0;
	endif

	username := RemoveEndJunk(username);
	password := RemoveEndJunk(password);

	var theft_level := AcctHackChecks(username, password, connection.ip);
	case ( theft_level )
		ACCT_NOT_EXIST:	 // Account doesn't yet exist.
			break;
		ACCT_LOGIN_OKAY: // Account credentials are valid.
			return 0;
			break;
		ACCT_LOGIN_FAIL: // Account credentials are invalid.
			return 0;
			break;
		ACCT_LOGIN_HACK: // Too many invalid logins for this IP. Leave user hanging.
			return 1;
			break;
	endcase

	var settings := ACCT_GetSettingsCfgElem("Settings");
	if ( !settings.AllowAutoAccounts )
		// Automatic account creation is disabled.
		return 0;
	endif

	var account := CreateNewAccount(username, password, 0, settings.DefaultExpansion);
	// In theory this should only return an error saying "Invalid parameter type".
	// Should never return "Account already exists" because we already looked for the
	// account and let POL handle it. And when it does return "Invalid parameter type"
	// we don't have to worry, POL will do the right job for us and just say that account
	// does not exist.
	if ( account.errortext )
		SysLog("CreateAccount() Error: "+account.errortext);
		SysLog("Username=("+Len(username)+") '"+username+"'    Password=("+Len(password)+") '"+password+"'");
		return 0;
	endif

	ACCT_ReportText("AutoAccount Created:"+username+" IP: "+connection.ip, ACCT_REPORT_CONSOLE+ACCT_REPORT_SYSLOG);

	return 0;
endfunction

function AcctHackChecks(username, password, ip)
	/*
	 * This is just a little password protection, so someone doesn't go around
	 * trying to steal peoples accounts trying 100's of passwords. It doesn't
	 * really stop someone, but it slows them down a lot and may lead them off
	 * from trying to steal the account.
	 *
	 */

	/*  [Password Protection]  */
	var account := FindAccount(username);
	if ( !account )
		// Account doesn't even exist.
		return ACCT_NOT_EXIST;
	elseif ( !account.CheckPassword(password) )
		var settings := ACCT_GetSettingsCfgElem("Settings");
		var failure_interval := GetConfigInt(settings, "FailureInterval");
		var failed_login := account.GetProp("#FailedLogin");

		// First attempt at failing the password check.
		if ( !failed_login[ip] )
			if ( Lower(TypeOf(failed_login)) != "dictionary" )
				failed_login := dictionary{};
			endif

			failed_login.insert(ip, array{1, POLCore().systime+failure_interval});
			account.SetProp( "#FailedLogin", failed_login);
			ACCT_ReportText("Invalid login credentials for account: "+username+" IP: "+ip, ACCT_REPORT_SYSLOG);
			return ACCT_LOGIN_FAIL; // Let pol tell the user it's an incorrect password.
		else
			var max_failures := GetConfigInt(settings, "MaxLoginFailures");
			var disable_length := GetConfigInt(settings, "DisableLength") * 60;
			var disable_grace := GetConfigInt(settings, "DisableGrace") * 60;

			if ( failed_login[ip][1] >= max_failures && (failed_login[ip][2] >= POLCore().systime) )
				Print("too many!");
		  	// Too many failure attempts. Leave the user hanging at login for the next
		  	// disable_length minutes if disable timer is greater than disable_grace.
		 		failed_login[ip][1] += 1;
		 		if ( failed_login[ip][2] > disable_grace )
					failed_login[ip][2] := POLCore().systime+disable_length;
					ACCT_ReportText("Disabling account ["+username+"] - IP ["+ip+"] for "+disable_length+" minutes. Invalid logins >= "+max_failures+"." , ACCT_REPORT_SYSLOG);
		 		endif
				account.SetProp("#FailedLogin", failed_login);
	  		return ACCT_LOGIN_HACK; // Leave user hanging.
		 	elseif ( failed_login[ip][1] >= max_failures && (failed_login[ip][2] <= POLCore().systime) )
		  	// User attempted to login with the wrong password after disable_length minutes.
		 		// Reset user's wait time.
		 		ACCT_ReportText("Resetting disable timer on account ["+username+"] - IP ["+ip+"]", ACCT_REPORT_SYSLOG);
		 		failed_login.erase(ip);
		 		account.SetProp("#FailedLogin", failed_login);
		  	return ACCT_LOGIN_FAIL;
		 	elseif ( failed_login[ip][1] <= max_failures )
		  	ACCT_ReportText("Invalid login credentials for account: "+username+" IP: "+ip, ACCT_REPORT_SYSLOG);

		 		if ( failed_login[ip][2] >= POLCore().systime )
					failed_login[ip][1] += 1;
				else
					failed_login[ip][1] := 1;
				endif

				failed_login[ip][2] := POLCore().systime+failure_interval;
				account.SetProp("#FailedLogin", failed_login);
		  	return ACCT_LOGIN_FAIL;
		 	endif
		endif
	endif

	// Passed password/hack check, let user login.
	return ACCT_LOGIN_OKAY;
endfunction

function RemoveEndJunk(text)
	var begin := CAsc("!");
	var end := CAsc("~");

	while ( 1 )
		if ( (CAsc(text[Len(text)]) < begin) || (CAsc(text[Len(text)]) > end) )
			text[Len(text)] := "";
		else
			break;
		endif
		SleepMS(2);
	endwhile

	return text;
endfunction