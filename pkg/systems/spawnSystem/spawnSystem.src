/* $Id$
 *
 */

use uo;
use os;

include ":spawnsystem:engines";
include ":spawnsystem:groups";
include ":spawnsystem:realms";
include ":spawnsystem:regions";
include ":spawnsystem:report";

program SpawnSystem()
	SS_ReportText("---=[ SPAWNER HAS STARTED UP ]=---", SPAWN_REPORT_SYSLOG);

	Initialize();

	SetGlobalProperty("#SpawnSystemPid", GetPid());

	while ( 1 )
		// Go through all realms -> regions -> groups.
		// Determine if it is time to spawn the group. If so, start its engine.
		// Save when it needs to run again (POLCore().systime)
		SpawnTheRegions();

		// Determine when this needs to run again.
		var delay := CalcNextTick();
		var event := Wait_For_Event(delay);
		/* To-do:
		   Take in events.
		   - Update the next run timer
		   - Other stuff?
		 */
	endwhile

	return 1;
endprogram

function SpawnTheRegions()
	foreach region_name in ( SS_GetRegionNames() )
		var next_run := CalcNextRunTime(region_name);
		if ( POLCore().systime < next_run )
			continue;
		endif

		foreach group_name in ( SS_GetGroupsInRegion(region_name).Keys() )
			var realm_name := SS_GetRegionRealm(region_name);
			var engine_name := SS_GetGroupEngine(group_name);
			var script := SS_StartSpawnEngine(engine_name, realm_name, region_name, group_name);
			if ( script.errortext )
				SS_ReportText("Error: Unable to start engine ("+engine_name+") for group ("+group_name+") in region ("+region_name+"). ->"+script.errortext, SPAWN_REPORT_SYSLOG);
			endif

			SS_SetRegionSpawnTime(region_name, POLCore().systime);
			SleepMS(2);
		endforeach

		SleepMS(2);
	endforeach

	return 1;
endfunction

function CalcNextRunTime(region_name)
	var last_run := CInt(SS_GetRegionSpawnTime(region_name));
	var run_wait := CInt(SS_GetRegionSpawnWait(region_name));
	var next_run := CInt(last_run + run_wait);

	return next_run;
endfunction

function CalcNextTick()
	var delay_time := 0;
	var region_names := SS_GetRegionNames();
	
	// If no regions exist, wait 1 hour.
	if ( CInt(region_names.Size()) < 1 )
		return 3600;
	endif
	
	foreach region_name in ( region_names )
		var next_run := CalcNextRunTime(region_name);
		var time_left := next_run - POLCore().systime;
		if ( !delay_time || time_left < delay_time )
			delay_time := time_left;
		endif
		if ( delay_time <= 0 )
			break;
		endif
		SleepMS(2);
	endforeach

	return delay_time;
endfunction

function Initialize()
	// To-do: Make this use a datafile for tracking.
	// Laziness prevails for now, so a global prop is used.
	if ( !GetGlobalProperty("SpawnSystemInit") )
		var script := Start_Script(":spawnsystem:initializer/firstRun");
		if ( script.errortext )
			SS_ReportText(script.errortext);
			return 0;
		else
			while ( script.pid )
				Sleep(1);
			endwhile
		endif

		SetGlobalProperty("SpawnSystemInit", 1);
		SS_ReportText("---=[ SPANER INITIALIZATION COMPLETE ]=---", SPAWN_REPORT_SYSLOG);
	endif

	return 1;
endfunction
