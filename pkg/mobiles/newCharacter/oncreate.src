/*
 * $Id: oncreate.src 787 2006-09-02 11:24:13Z AustinHeilman $
 *
 */

use uo;
use os;
use file;
use cfgfile;

include ":attributes:attributes";
include ":attributes:attributes_ex";
include ":newcharacter:newCharacter";

program OnCreate(params)
	var who := params[1];
	var selected_skills := params[2];
	params := 0; // No longer needed.

	// Convert skill ID numbers to attribute names.
	// Core currently sends them as skill IDs!
	foreach skill in ( selected_skills )
		skill := AP_SkillIdToAttributeName(skill);
		SleepMS(2);
	endforeach

	// Save the chosen skills.
	NC_SetStartupSkills(who, selected_skills);

	var uniques := array{};
	GenerateItemsForSkill(who, "All", uniques);
	foreach skill in ( selected_skills )
		GenerateItemsForSkill(who, skill, uniques);
		SleepMS(2);
	endforeach

	SysLog("Account ("+who.acctname+") creating character ("+who.name+")");

	return 1;
endprogram

function GenerateItemsForSkill(who, attribute, byref uniques)
	var cfg_file := ReadConfigFile(":newcharacter:startEquip");
	var cfg_elem := cfg_file[attribute];

	CreateItemsInElem(cfg_elem, who.backpack, "All");

	foreach entry in ( GetConfigStringArray(cfg_elem, "Unique") )
		entry := ParseItemString(entry);
		var objtype := GetObjTypeByName(entry.name);
		if ( !(objtype in uniques) )
			uniques.Append(objtype);
			CreateItemInContainer(who.backpack, entry.name, entry.amount);
		endif
		SleepMS(2);
	endforeach

	foreach entry in ( GetConfigStringArray(cfg_elem, "Random") )
		entry := SplitWords(entry);
		var tmp_elem := cfg_file[entry[1]];
		var amount := CInt(entry[2]);

		CreateItemsInElem(tmp_elem, who.backpack, amount);
		SleepMS(2);
	endforeach

	return 1;
endfunction

function CreateItemsInElem(cfg_elem, container, amount)
	var items := GetConfigStringArray(cfg_elem, "Item");
	if ( amount == "All" )
		foreach entry in ( GetConfigStringArray(cfg_elem, "Item") )
			entry := ParseItemString(entry);
			CreateItemInContainer(container, entry.name, entry.amount);
			SleepMS(2);
		endforeach
	else
		for ( amount; amount>0; amount-=1 )
			var entry := items[RandomInt(items.Size())+1];
			entry := ParseItemString(entry);
			CreateItemInContainer(container, entry.name, entry.amount);
			SleepMS(2);
		endfor
	endif

	return 1;
endfunction

function CreateItemFromElem(who, byref cfg_elem)
	var item_list := GetConfigStringArray(cfg_elem, "Item");
	var entry := item_list[RandomInt(item_list.Size())+1];
	entry := SplitWords(entry);

	var item := CreateItemInBackPack(who, CInt(entry[1]), entry[2]);
	if ( item.errortext )
		SendSysMessage(who, "Error creating "+entry+" ->"+item.errortext);
	endif

	return item;
endfunction

function ParseItemString(line)
	line := SplitWords(line);
	var name := CStr(line[1]);
	var amount := RandomDiceRoll(CStr(line[2]));

	var result := struct;
	result.+name := name;
	result.+amount := CInt(amount);

	return result;
endfunction
