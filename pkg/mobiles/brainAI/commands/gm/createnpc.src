/* $Id$
 *
 */

use uo;
use os;
use polsys;

include ":brainAI:npcUtil";
include ":datafile:datafile";
include ":gumps:gumps";
include ":gumps:gumps_ex";

CONST BACK_BTN		:= 0xFFFD;
CONST UNCACHE_BTN	:= 0xFFFE;
CONST UNLOADCFG_BTN	:= 0xFFFF;
CONST DEFAULT_CATEGORY	:= "None";

var g_datafile := DFOpenDataFile(":brainAI:createnpc", DF_CREATE);

program textcmd_createNPC(mobile, template)
	if ( !template )
		template := SelectTemplateFromGump(mobile);
		if ( !template )
			return 0;
		endif
	endif

	var targ := TargetCoordinates(mobile);
	if ( !targ )
		SendSysMessage(mobile, "Cancelled");
		return 0;
	endif

	var npc := CreateNPCFromTemplate(template, targ.x, targ.y, targ.z, 0, mobile.realm);
	npc.facing := mobile.facing;
	if ( npc.errortext )
		SendSysMessage(mobile, "Error creating NPC ["+template+"] -> "+npc.errortext);
		return 0;
	else
		SendSysMessage(mobile, "Created NPC template '"+template+"'");
		return 1;
	endif
endprogram

function SelectTemplateFromGump(mobile)
	var cur_gump := RetrieveGump("Index"); // Current gump to display
	var selection := 0; // Is user at a gump where a template can be selected.

	while ( mobile.connected )
		var input := GFSendGump(mobile, cur_gump);

		if ( !input ) // Right click
			SendSysMessage(mobile, "Cancelled");
			return 0;
		elseif ( input[BACK_BTN] )
			cur_gump := RetrieveGump("Index");
			selection := 0;
		elseif ( input[UNCACHE_BTN] )
			foreach elem_name in ( DFGetElemNames(g_datafile) )
				g_datafile.DeleteElement(elem_name);
				SleepMS(2);
			endforeach

			SendSysMessage(mobile, "All createnpc gump data uncached.");

			return 0;
		elseif ( input[UNLOADCFG_BTN] )
			SendSysMessage(mobile, "Begining to unload npcdesc.cfg files...");

			UnloadConfigFile(":*:npcdesc");
			SendSysMessage(mobile, "Unloading :*:npcdesc");
			UnloadConfigFile("::npcdesc");
			SendSysMessage(mobile, "Unloading ::npcdesc");

			foreach package in (Packages())
				if ( package.npcdesc )
					UnloadConfigFile(":"+(package.name)+":npcdesc");
					SendSysMessage(mobile, "Unloading :"+(package.name)+":npcdesc");
				endif
				SleepMS(2);
			endforeach

			SendSysMessage(mobile, "ReloadConfiguration() -> "+ReloadConfiguration());

			SendSysMessage(mobile, "All npcdesc.cfg files unloaded.");

			return 0;
		elseif ( selection == 1 )
			var elem_names := GetTemplateList();
			return elem_names[input[0]];
		else
			var category_names := GetCategoryNames();
			cur_gump := RetrieveGump(category_names[input[0]]);
			selection := 1;
		endif
		SleepMS(2);
	endwhile

	SendSysMessage(mobile, "Unknown error...");
	return 0;
endfunction

function RetrieveGump(category_name)
	if ( category_name == "Index" )
		var data_elem := DFFindElement(g_datafile, "Index");
		var gump := data_elem.GetProp("Gump");
		if ( !gump )
			gump := BuildIndexGump();
		endif
		return gump;
	else
		var data_elem := DFFindElement(g_datafile, category_name);
		var gump := data_elem.GetProp("Gump");
		if ( !gump )
			gump := BuildNPCGump(category_name);
		endif
		return gump;
	endif
endfunction

function GetCategoryNames()
	var data_elem := DFFindElement(g_datafile, "Index");
	var category_names := data_elem.GetProp("CategoryNames");
	if ( !category_names )
		category_names := (SortNPCs().Keys());
		data_elem := DFFindElement(g_datafile, "Index", DF_CREATE);
		data_elem.SetProp("CategoryNames", category_names);
	endif

	return category_names;
endfunction

function GetTemplateList()
	var data_elem := DFFindElement(g_datafile, "Index");
	var template_names := data_elem.GetProp("TemplateNames");
	if ( !template_names )
		template_names := NPC_GetAllTemplateNames();
		template_names.Sort();
		data_elem.SetProp("TemplateNames", template_names);
	endif

	return template_names;
endfunction

function BuildIndexGump()
	Set_Priority(100);

	var gump := GFCreateGump();
	GFPage(gump, 0);
	GFResizePic(gump, 0, 0, GFGetCfgConst("Defaults", "BackGround"), 300, 480);
	GFResizePic(gump, 15, 15, GFGetCfgConst("Defaults", "ForeGround"), 270, 450);
	var y_pos := 40;
	var counter := 1;
	GFTextMid(gump, 10, 20, 280, 2100, "NPC Categories");

	/////
	GFAddButton(gump, 18, 440, 4002, 4003, GF_CLOSE_BTN, UNLOADCFG_BTN);
	GFTextLine(gump, 47, 440, 2100, "Unload NPCDESC");
	/////
	GFAddButton(gump, 170, 440, 4002, 4003, GF_CLOSE_BTN, UNCACHE_BTN);
	GFTextLine(gump, 200, 440, 2100, "Uncache gump");
	/////

	GFPage(gump, 1);
	foreach category_name in (GetCategoryNames())
		GFAddButton(gump, 20, y_pos+3, 2117, 2118, GF_CLOSE_BTN, (_category_name_iter));
		GFTextLine(gump, 40, y_pos, 2100, category_name);
		y_pos += 20;
		counter += 1;

		if ( counter > 20 )
			counter := 1;
			y_pos := 40;
			GFAddButton(gump, 265, 445, 2648, 2649, GF_PAGE_BTN, gump.cur_page+1);
			GFPage(gump, gump.cur_page+1);
			GFAddButton(gump, 265, 15, 2650, 2651, GF_PAGE_BTN, gump.cur_page-1);
		endif
		SleepMS(2);
	endforeach
	var data_elem := DFFindElement(g_datafile, "Index", DF_CREATE);
	data_elem.SetProp("Gump", gump);

	return gump;
endfunction

function BuildNPCGump(category_name)
	Set_Priority(100);

	var npc_list := SortNPCs();
	if ( !npc_list.Exists(category_name) )
		return error{"errortext":="Category name does not exist."};
	endif
	npc_list := npc_list[category_name];

	var gump := GFCreateGump();
	GFPage(gump, 0);
	GFResizePic(gump, 0, 0, GFGetCfgConst("Defaults", "BackGround"), 300, 480);
	GFResizePic(gump, 15, 15, GFGetCfgConst("Defaults", "ForeGround"), 270, 450);
	GFAddButton(gump, 18, 440, 4014, 4015, GF_CLOSE_BTN, BACK_BTN);
	GFTextLine(gump, 47, 440, 2100, "Back");

	var y_pos := 40;
	var counter := 1;
	GFTextMid(gump, 10, 15, 290, 2100, "NPC List - "+category_name);
	GFPage(gump, 1);
	foreach template in ( npc_list[category_name] )
		GFAddButton(gump, 20, y_pos+3, 2117, 2118, GF_CLOSE_BTN, template.pos);
		GFTextLine(gump, 40, y_pos, template.color, template.name);
		y_pos += 20;
		counter += 1;

		if ( counter > 20 )
			counter := 1;
			y_pos := 40;
			GFAddButton(gump, 265, 445, 2648, 2649, GF_PAGE_BTN, gump.cur_page+1);
			GFPage(gump, gump.cur_page+1);
			GFAddButton(gump, 265, 15, 2650, 2651, GF_PAGE_BTN, gump.cur_page-1);
		endif
		SleepMS(2);
	endforeach

	var data_elem := DFFindElement(g_datafile, Lower(category_name), DF_CREATE);
	data_elem.SetProp("Gump", gump);

	return gump;
endfunction

function SortNPCs()
	var data_elem := DFFindElement(g_datafile, "Index", DF_CREATE);
	var categories :=  data_elem.GetProp("NPCListSorted");
	if ( categories )
		return categories;
	endif

	var elem_names := GetTemplateList();

	categories := dictionary;
	categories[DEFAULT_CATEGORY] := array{};

	foreach template_name in (elem_names)
		var cfg_elem := NPC_GetNPCConfig(template_name);
		var template := struct;
		template.+name :=template_name;
		template.+pos :=_template_name_iter;
		template.+color :=GetNameColor(cfg_elem.alignment);

		if ( !cfg_elem.category )
			categories[DEFAULT_CATEGORY].Append(template);
		else
			if ( Lower(TypeOf(categories[cfg_elem.category])) != "array" )
				categories[cfg_elem.category] := array{};
			endif

			categories[cfg_elem.category].Append(template);
		endif
		SleepMS(2);
	endforeach

	// This function is time consuming.. so its results get saved.
	data_elem.SetProp("NPCListSorted", categories);

	return categories;
endfunction

function GetNameColor(reputation)
	var reputation_cfg := ReadConfigFile("::repsys");
	//We know the config is there - core won't start without it.
	var reputation_elem := reputation_cfg["NameColoring"];
	if ( !reputation_elem )
		/*
		 * In most shards the config is setup as
		 * NameColoring
		 * {
		 * // Information here
		 * }
		 * **---=[! Needs to be changed to !]=---**
		 * NameColoring NameColoring
		 * {
		 * //Information here
		 * }
		 */
		SysLog("Unable to read in repsys.cfg elem [NameColoring] ->"+reputation_elem.errortext);
		SysLog("You probably don't have an elem name set for it. Thats naughty!");
		return 0;
	endif

	case ( reputation )
		"good":		return (GetConfigInt(reputation_elem, "innocent")-1);
		"neutral":	return (GetConfigInt(reputation_elem, "attackable")-1);
		"evil":		return (GetConfigInt(reputation_elem, "murderer")-1);
		 // No alignment for an npc is considered neutral
		default: 	return (GetConfigInt(reputation_elem, "attackable")-1);
	endcase
endfunction
