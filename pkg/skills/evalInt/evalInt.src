/* $Id: evalInt.src 1303 2008-09-26 19:31:22Z rozenblit $
 *
 */
use cfgfile;
use uo;

include ":attributes:attributeConstants";
include ":attributes:attributes";
include ":attributes:skillCheck";

var mental_cfg := ReadConfigFile(":evalint:intelligence");

program skill_EvaluatingIntelligence(who)

	EraseObjProperty(who, "#IsMeditating");
	EraseObjProperty(who, "#HealTimer");

	SendSysMessage(who, "What do you wish to evaluate?");
	var subject := Target(who);
	if(!subject)
		return 0;
	elseif(subject.serial == who.serial)
		PrintTextAbovePrivate(who, "You know your mental capabilities quite well enough already.", who);
		return 0;
	elseif(subject.graphic == 0x2006)
		SendSysMessage(who, "Looks pretty dead to you.");
		return 0;
	elseif(!subject.isA(POLCLASS_MOBILE))
		SendSysMessage(who, "That cannot be evaluated.");
		return 0;
	endif

	// variables for sys messages
	var MOB_APPROVED  := { 0x190, 0x191, 0x25D, 0x25E };
	var str_reply := struct { sub_name, sub_fail, sub_super, sub_intel, sub_mana };

	if( !(subject.graphic in MOB_APPROVED) )
		str_reply.sub_name := "That creature";
		str_reply.sub_fail := "that creature's mental abilities.";
		str_reply.sub_super := "supernaturally";
	else
		str_reply.sub_name := subject.name;
		if(upper(subject.name[Len(subject.name)]) != "S" || lower(subject.name[Len(subject.name)]) != "s" )
			str_reply.sub_fail := subject.name+"'s mental abilities.";
		else
			str_reply.sub_fail := subject.name+"' mental abilities.";
		endif
		str_reply.sub_super := "superhumanly";
	endif

	HandleSubIntell(subject, str_reply);
	HandleSubMentalStrength(subject, str_reply);

	// Replaces the <strength>, <type>, and <gender> from config file results.
	HandleSubParsing(subject, str_reply);

	var eval_response := str_reply.sub_name+" looks "+str_reply.sub_intel+".";
	var mana_resonse  := str_reply.sub_name+" is at "+str_reply.sub_mana+" mana.";

	if( SkillCheck(who, EVALUATING_INTELLIGENCE, -1) > 0 )
		PrintTextAbovePrivate(subject, eval_response, who);
		// player's eval int skill equal/greater than 65 can get mana info
		if(AP_GetSkill(who, EVALUATING_INTELLIGENCE) >= 65)
			PrintTextAbovePrivate(subject, mana_resonse, who);
		endif
		return 1;
	else
		PrintTextAbovePrivate(subject, "You cannot judge "+str_reply.sub_fail, who);
		return 0;
	endif

endprogram


function HandleSubIntell(subject, byref str_reply)

	var sub_smarts := AP_GetStat(subject, "Intelligence");

	var intel_elem := mental_cfg["Intelligence"];
	if ( !intel_elem )
		return intel_elem;
	endif

	var phrase_list := GetConfigStringArray(intel_elem, "Int");

	foreach entry in ( phrase_list )
		// SplitWords the entry, using a tab as the delimiter.
		var p_array := SplitWords(entry, "\t");
		if ( sub_smarts < CDbl(p_array[1]) )
			str_reply.sub_intel := p_array[2];
			return 1;
		endif
		sleepms(2);
	endforeach

	return error{"errortext":="Could not find intelligence phrase for serial "+subject.serial};


endfunction

function HandleSubMentalStrength(subject, byref str_reply)

	var sub_mana_level := CInt(CInt(AP_GetVital(subject, "Mana"))/CDbl(AP_GetVitalMaximumValue(subject, "Mana"))*100);

	var mana_elem := mental_cfg["Mana"];
	if ( !mana_elem )
		return mana_elem;
	endif
	var phrase_list := GetConfigStringArray(mana_elem, "Man");
	foreach entry in ( phrase_list )
		// SplitWords the entry, using a tab as the delimiter.
		var p_array := SplitWords(entry, "\t");
		if ( sub_mana_level < CDbl(p_array[1]) )
			str_reply.sub_mana := p_array[2];
			return 1;
		endif
		sleepms(2);
	endforeach

	return error{"errortext":="Could not find mana phrase for serial "+subject.serial};

endfunction

// I HATE THIS!! But Austin wants cfgs used for stuff......
function HandleSubParsing(subject, byref str_reply)

	var sub_gender   := "it";

	case ( subject.graphic )
		0x25D:
		0x190: sub_gender := "he";
		0x25E:
		0x191: sub_gender := "she";
	endcase

	while ( Find( str_reply.sub_intel, "<super>", 1 ) != 0 )
		str_reply.sub_intel["<super>"] := str_reply.sub_super;
		sleepms(2);
	endwhile
	while ( Find( str_reply.sub_intel, "<gender>", 1 ) != 0 )
		str_reply.sub_intel["<gender>"] := sub_gender;
		sleepms(2);
	endwhile

	while ( Find( str_reply.sub_mana, "<super>", 1 ) != 0 )
		str_reply.sub_mana["<super>"] := str_reply.sub_super;
		sleepms(2);
	endwhile
	while ( Find( str_reply.sub_mana, "<gender>", 1 ) != 0 )
		str_reply.sub_mana["<gender>"] := sub_gender;
		sleepms(2);
	endwhile

	return 1;

endfunction