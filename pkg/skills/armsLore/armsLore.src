/* $Id: armsLore.src 957 2007-01-17 19:27:13Z sroyalty $
 *
 */
use cfgfile;
use uo;

include ":attributes:attributeConstants";
include ":attributes:attributes";
include ":attributes:skillCheck";

var arms_cfg := ReadConfigFile(":armslore:arms");

program skill_Armslore(who)

	EraseObjProperty(who, "#IsMeditating");
	EraseObjProperty(who, "#HealTimer");

	SendSysMessage(who, "Select an object to evaluate.");

	var the_item := Target(who, TGTOPT_CHECK_LOS);
	if ( !the_item )
		return 0;
	endif

	if ( !(the_item.isA(POLCLASS_WEAPON)) && !(the_item.isA(POLCLASS_ARMOR)) )
		SendSysMessage(who, "You can only use this skill on weapons or armor!");
		return 0;
	endif

	var item_desc := struct { quality, damage };

	if ( SkillCheck(who, ARMS_LORE, -1) > 0 )
		var max_hp := the_item.maxhp;
		var hp := the_item.hp;
		if (hp == 0)
			hp := 1;
		endif
		if (max_hp == 0)
			max_hp := 1;
		endif

		var damage_nbr := CInt(((hp  * 100) / max_hp));
		var quality_nbr := CInt(the_item.quality  * 100);

		HandleSubQuality(quality_nbr, item_desc);
		HandleSubDamage(damage_nbr, item_desc);

		SendSysMessage(who, "This item is of "+item_desc.quality+" quality, and is in "+item_desc.damage+" condition.");
	else
		SendSysMessage(who, "You can't quite tell . . .");
	endif

endprogram

function HandleSubQuality(quality_nbr, byref item_desc)

	var quality_elem := arms_cfg["Quality"];
	if ( !quality_elem )
		return quality_elem;
	endif

	var phrase_list := GetConfigStringArray(quality_elem, "Quality");

	foreach entry in ( phrase_list )
		// SplitWords the entry, using a tab as the delimiter.
		var p_array := SplitWords(entry, "\t");
		if ( quality_nbr < CDbl(p_array[1]) )
			item_desc.quality := p_array[2];
			return 1;
		endif
		SleepMS(2);
	endforeach

	return error{"errortext":="Could not find quality phrase for level "+quality_nbr};

endfunction

function HandleSubDamage(damage_nbr, byref item_desc)

	var damage_elem := arms_cfg["Damage"];
	if ( !damage_elem )
		return damage_elem;
	endif

	var phrase_list := GetConfigStringArray(damage_elem, "Damage");

	foreach entry in ( phrase_list )
		// SplitWords the entry, using a tab as the delimiter.
		var p_array := SplitWords(entry, "\t");
		if ( damage_nbr < CDbl(p_array[1]) )
			item_desc.damage := p_array[2];
			return 1;
		endif
		SleepMS(2);
	endforeach

	return error{"errortext":="Could not find damage phrase for level "+damage_nbr};

endfunction