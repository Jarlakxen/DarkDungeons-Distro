use uo;
use os;
use util;

include ":attributes:attributes";

program exploder(parms)
	var potion := parms[1];
	var who := parms[2];
	var thecenter := potion;
	while(thecenter.container)
		thecenter := thecenter.container;
	endwhile

	SetScriptController(who);
	if ( who.cursor )
		CancelTarget(who);
	endif
	ReleaseItem(potion); // allows bomb to be destroyed
	var dmg := 3;
  
	// creating a location variable to store the item data so we can destroy the item.
	var location := struct;
	location.+x := thecenter.x;
	location.+y := thecenter.y;
	location.+z := thecenter.z;
	location.+objtype := potion.objtype;
  
	// and it goes out in a bang!
	PlayStationaryEffect( potion.x, potion.y, potion.z, 0x36b0, 7, 10, 1, potion.realm);
	PlaySoundEffect(potion, 0x208);
	DestroyItem(potion);

	// It damages everything near it.
	foreach critter in ListMobilesNearLocationEx( location.x, location.y, location.z, 1, LISTEX_FLAG_NORMAL + LISTEX_FLAG_HIDDEN, who.realm );
		PlayObjectCenteredEffect( critter, 0x36b0, 7, 0x10 );
		PlaySoundEffect( critter, 0x208);
		case(location.objtype)
			0xdc08: dmg := (RandomInt(4) + 1 );
			0xdc09: dmg := (RandomInt(4) + 6 );
			0xdc07: dmg := (RandomInt(9) + 11 );
		endcase
		// It's obvious people are gonna try using stacked potions to make a bigger bang. Bastids.
		if ( potion.stackable )
			dmg := (dmg * potion.amount) / 2;
		endif
		// Stacked potions can be abused with npcs. Nerf the crap outta them for this
		if ( critter.npctemplate )
			dmg := dmg / 5;
		endif
		ApplyRawDamage(critter, dmg);
	endforeach

	// Then everything near it goes out in a bang
	var potions := {0xdc08, 0xdc09, 0xdc07};
	foreach item in ListItemsNearLocation(location.x, location.y, location.z, 1, who.realm)
		if(item.objtype in potions)
			var passparms := {item, who};
			sleep(1); // Makes the cascading effect more dramatic and less instantaneous
			start_script(":alchemy:exploder", passparms);
		endif
	endforeach
endprogram
