/*===============================================================
* Current Version
* MSG.SRC - v0.1
* Updated 9/17/2005 3:20AM
*
* -- Revision v0.1 --
* Austin
*  Created command
*
===============================================================*/

use uo;
use os;
use util;

include ":gumps:gumps";
include ":gumps:gumps_ex";
include ":datafile:datafile";

program command_Message(sender, text)
	if ( CommandIssued(sender, text) )
		return 1;
	else
		MessageGump(sender);
	endif
endprogram

function MessageGump(sender)
	var gump := GFCreateGump();

	GFResizePic(gump, 0, 0, GFGetCfgConst("Defaults", "BackGround"), 310, 420);
	GFResizePic(gump, 15, 15, GFGetCfgConst("Defaults", "ForeGround"), 280, 390);

	GFTextLine(gump, 25, 20, 2100, "receiver Name");
	GFTextLine(gump, 255, 20, 2100, "Send");

	var names_list := GetNamesList(sender);
	var num_receivers := names_list.Size();
	var counter := 0;
	var y_pos := 45;

	GFPage(gump, 1);
	foreach name in (names_list.Keys())
		GFTextLine(gump, 25, y_pos, 2100, name);
		GFAddButton(gump, 261, y_pos+3, 2117, 2118, GF_CLOSE_BTN, _name_iter);

		y_pos += 20;
		counter += 1;

		if ( counter >= 18 && _name_iter < num_receivers )
			GFAddButton(gump, 283, 385, 0xA92, 0xA93, GF_PAGE_BTN, gump.cur_page+1);
			GFPage(gump, gump.cur_page+1);
			GFAddButton(gump, 283, 40, 0xA90, 0xA91, GF_PAGE_BTN, gump.cur_page-1);
			counter := 0;
			y_pos := 40;
		endif
		SleepMS(2);
	endforeach

	var input := GFSendGump(sender, gump);
	input := input[0];

	if ( !input )
		SendSysMessage(sender, "Cancelled");
		return 0;
	else
		names_list := names_list.Keys();
		SendMessage(sender, names_list[input]);
	endif
endfunction

function GetNamesList(sender)
	var the_list := dictionary; // Used to store names in ABC order
	foreach person in EnumerateOnlineCharacters();
		var msg_settings := GetMessageSettings(person);

		if ( (msg_settings.disable) && (!sender.cmdlevel) )
			//If messages are off, and 'sender' is a receiver, dont add the name.
			//If 'sender' has a command level, then he/she can see any name.
			continue;
		elseif ( (!msg_settings.visible) && (person.concealed > sender.cmdlevel) );
			//If the person is not in visible mode, and concealed is
			//higher than sender's command level, don't add that person.
			continue;
		else
			the_list.Insert(person.name, person.serial);
		endif

		SleepMS(2);
	endforeach

	return the_list;
endfunction

function SendMessage(sender, name_text, is_reply:=0)
	var can_msg := 0;
	if ( is_reply )
		can_msg := 1;
	elseif ( name_text in (GetNamesList(sender).Keys()) )
		can_msg := 1;
	endif

	if ( !can_msg )
		SendSysMessage(sender, name_text+" is not online.");
		return 0;
	endif

	var message_txt := RequestInput(sender, sender.backpack, "What message would you like to send to "+name_text+"? (hit escape to cancel)");
	if ( !message_txt )
		SendSysMessage(sender, "Cancelled.");
		return 0;
	endif

	var sndr_settings := GetMessageSettings(sender);
	sndr_settings["last"] := name_text;
	SetObjProperty(sender, ".msg", sndr_settings);

	foreach receiver in EnumerateOnlineCharacters()
		if ( receiver.name == name_text )
			SendSysMessage(receiver, "Message from "+sender.name+" : "+message_txt);
			SendSysMessage(sender, "You sent a message to ["+receiver.name+"]: "+message_txt);

			var rcvr_settings := GetMessageSettings(receiver);
			rcvr_settings["reply"] := sender.name;
			SetObjProperty(receiver, ".msg", rcvr_settings);

			if( sndr_settings.Exists("disabled") )
				SendSysMessage(sender, "Reminder: You have messages off.");
				SendSysMessage(receiver, "Note: "+sender.name+" has messages off. Use .msg reply.");
			endif
		elseif ( receiver.cmdlevel < sender.cmdlevel )
			var rcvr_settings := GetMessageSettings(receiver);
			if ( rcvr_settings.Exists("spy") )
				SendSysMessage(receiver, "[MSG SpyMode] From:"+sender.name+" To:"+name_text+": "+message_txt);
			endif
		endif

		SleepMS(2);
	endforeach
endfunction

function CommandIssued(sender, text)
	var msg_settings := GetMessageSettings(sender);

	if ( text == "off" )
		msg_settings["disabled"] := 1;
		SetObjProperty(sender, ".msg", msg_settings);
		SendSysMessage(sender, "Your name has been removed from the .msg list.");
		return 1;
	elseif ( text == "on" )
		msg_settings.Erase("disabled");
		SetObjProperty(sender, ".msg", msg_settings);
		SendSysMessage(sender, "Your name has been put back on from the .msg list.");
		return 1;
	elseif ( text == "reply" )
		SendMessage(sender, msg_settings["reply"], 1);
		return 1;
	elseif ( text == "last" )
		SendMessage(sender, msg_settings["last"], 1);
		return 1;
	elseif ( text )
		SendMessage(sender, text);
		return 1;
	endif

	if ( sender.cmdlevel <= 1 )
		return 0;
	elseif ( text == "spy on" )
		msg_settings["spy"] := 1;
		SendSysMessage(sender, "Private message viewing is enabled.");
		SetObjProperty(sender, ".msg", msg_settings);
		return 1;
	elseif ( text == "spy off" )
		msg_settings.Erase("spy");
		SendSysMessage(sender, "Private message viewing is disabled.");
		SetObjProperty(sender, ".msg", msg_settings);
		return 1;
	elseif ( text == "visible on" )
		msg_settings["visible"] := 1;
		msg_settings.Erase("visible");
		SendSysMessage(sender, "receivers can now message you while concealed.");
		SetObjProperty(sender, ".msg", msg_settings);
		return 1;
	elseif ( text == "visible off" )
		msg_settings.Erase("visible");
		SendSysMessage(sender, "receivers can no longer message you while concealed.");
		SetObjProperty(sender, ".msg", msg_settings);
		return 1;
	else
		return 0;
	endif
endfunction

function GetMessageSettings(mobile)
	var msg_settings := GetObjProperty(mobile, ".msg");
	if ( Lower(TypeOf(msg_settings)) != "dictionary"  )
		msg_settings := dictionary;
	endif

	return msg_settings;
endfunction