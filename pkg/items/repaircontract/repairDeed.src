use uo;
use cfgfile;

include ":attributes:attributeConstants";
include ":attributes:attributes";
include ":attributes:skillCheck";
include ":crafting:old/include/craftingRepair";
include ":merchants:merchant";

program repairDeed(who, deed)

	if ( !ReserveItem(deed) )
		SendSysMessage(who, "That is already in use.");
		return 0;
	elseif ( (!deed.movable) )
		SendSysMessage(who, "You cannot use that");
		return 0;
	elseif ( !(deed in EnumerateItemsInContainer(who.backpack)) )
		SendSysMessage(who, "That item is not in your backpack.");
		return 0;
	endif

	var type := Lower(GetObjProperty(deed, "type"));
	if(NearNPC(who, type))
		if(RepairFromDeed(who, deed))
			DestroyItem(deed);
		endif
	else
		SendSysMessage(who, "You must be near a "+type+" shop to use this contract.");
		return 0;
	endif

	return 1;

endprogram

function NearNPC(who, type)

	var MOBS_Near := ListMobilesNearLocation(who.x, who.y, who.z, 10);
	foreach mobile in MOBS_Near
		if ( mobile.npctemplate )
			if( lower(CPM_GetMerchantType(mobile)) == type)
				return 1;
			endif
		endif
	endforeach
	return 0;

endfunction

function RepairFromDeed(who, deed)

	var skillid := GetObjProperty(deed, "skill");
	var what := SelectiveRepair(who, skillid);
	if ( !what || what.errortext )
		return 0;
	endif

	if ( what.hp == what.maxhp )
		SendSysMessage(who, "That is already in full repair.");
		return 0;
	endif
	if ( (what.hp <= 0) || (what.quality <= 0.1) || (!what.quality) )
		SendSysMessage(who, "You destroyed the item.");
		DestroyItem(what);
		return 1;
	endif

	var maxhp := what.maxhp;
	maxhp := CInt(maxhp * what.quality);
	var damaged := maxhp - what.hp;
	var hisskill := CInt(GetObjProperty(deed, "level"));

	var damageamount := 0.0;
	damageamount := (125 -  hisskill)/3000.0;

	if(what.quality <= damageamount)
		SendSysMessage(who, "That item has been repaired many times, and will break if repairs are attempted again.");
		return 0;
	endif


	var fail := CInt((what.maxhp - what.hp)/what.maxhp);
	var repaired_amount := CInt((RandomInt(hisskill) + 1));
	var success := CalcSuccessPercent(who, skillid, fail, hisskill) + repaired_amount;
	if ( fail > success )
		SendSysMessage(who, "You fail to repair the item and the repair contract is destroyed.");
		return 1;
	endif
	if(damaged == 1)
		success := 1;
	endif

	what.quality := what.quality - damageamount;
	if ( what.hp + repaired_amount > what.maxhp )
		what.hp := what.maxhp;
		EraseObjProperty(what, "swings");
		SendSysMessage(who, "You repair the item.");
	else
		what.hp := what.hp + repaired_amount;
		SendSysMessage(who, "You repair the item");
	endif

  return 1;

endfunction

function SelectiveRepair(who, skillid)

	SendSysMessage(who, "Select item to repair.");
	var use_on := Target(who);
	if ( !use_on || use_on.errortext )
		return 0;
	endif

	if ( !ReserveItem(use_on) )
		SendSysMessage(who, "That is already in use.");
		return 0;
	elseif( (!use_on.movable) )
		SendSysMessage(who, "You cannot use that");
		return 0;
	endif
	if( !(use_on in EnumerateItemsInContainer(who.backpack)) )
		SendSysMessage(who, "That item is not in your backpack nor equipped.");
		return 0;
	endif

	if(is_repairable(who, use_on.objtype, skillid))
		return use_on;
	else
		return 0;
	endif

endfunction

function is_repairable(who, objtype, skillid)

	var skill_cfg;
	case( skillid )
		BLACKSMITHY: skill_cfg := ReadConfigFile(":blacksmithy:blacksmithy");
		BOWCRAFT_FLETCHING: skill_cfg := ReadConfigFile(":bowcraft:bowcraft");
		CARPENTRY: skill_cfg := ReadConfigFile(":carpentry:carpentry");
		TAILORING: skill_cfg := ReadConfigFile(":tailoring:tailoring");
	endcase

	var repairable := is_weapon_armor(objtype);

	var skill_required := FindConfigElem(skill_cfg, objtype);
	if(skill_required)
		if(repairable == 1)
			return 1;
		else
			SendSysMessage(who, "The item cannot be repaired");
			return 0;
		endif
	else
		SendSysMessage(who, "You cannot repair that item with this type of repair contract.");
		return 0;
	endif

endfunction